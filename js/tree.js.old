(function($){


    /**
    * PedigreeViewer UI object
    * @param PedigreeViewer The pedigreeViewer object this UI is attached to
    */
    function PedigreeViewerUI(pedigreeViewer){

        var focus;              // focus ancestor
        var chartContainer;     // the container wrapping the whole chart
        var chartDiv;           // where to draw chart
        var waitDiv;            // wait msg div 
        var proxyDragger;       // Catch and translate mouse tragging
        var renderer;           // Renderer typea (bowtie/etc.)
        var hoverCache;         // Cache for rendering hovered pedigree lines
        var idPrefix;           // ID Prefix

        var _canvas;            // canvas object
        var _renderer;          // Drawing types

        this._pedigreeViewer = pedigreeViewer;

        this._personMap = {};

        this._initialize = function(){
            // I'M HERE. Corresponds with line 922 in pv.js
            this._pedigreeViewer.addListener({chartUpdated:_update});
            focus = this._pedigreeViewer.getFocus();
            chartContainer = this._pedigreeViewer.divs.chartContainer;
            chartDiv = this._pedigreeViewer.divs.chartDiv;
            waitDiv = this._pedigreeViewer.divs.chartDiv;
            
            // Create canvas object
            _canvas = document.createElement('canvas');
            _canvas.className = 'pvChartCanvas';
            _canvas.width = chartDiv.width();
            _canvas.height = chartDiv.height();
            chartDiv.append(_canvas);

            // The proxy dragger does what
            proxyDragger = new ProxyDragger(chartContainer, chartDiv, {filterClasses:"preview individual ui-slider-handle ui-slider"});

            // This is the actual renderer object
            _renderer = new StandardChartRenderer(this);

            // Render the tree for the first time
            _redraw();
    
            // Set up the hover cache
            hoverCache = new SimpleCache(
            function(item){ // ID Generator
                return item.attr(REL);
            },
            function(item){ // Value generator
                var a = this._pedigreeViewer.findLineageList(item.attr(REL)); 
                var ids = "";
                for(var i = 0;i<a.people.length;i++){
                    $("#" + idPrefix + defaults.ids.person + a.people[i].id).addClass("pvLineage_" + item.attr(REL));
                }
            }
            );
        };

        this._initialize();
    }

    /**
    * PedigreeViewer data object
    * @param dataUrl (string)  URL to fetch pedigree JSON from
    * @param options (hash) Set of options to override
    * { dataUrl:....}
    */
    function PedigreeViewer(target,dataUrl,options) {
        /**** Object variables and functions ****/
        // Make the UI object and bind it to this PedigreeViewer object
        this._ui = new PedigreeViewerUI(this);

        // Add new ancestors to PV
        this.addAncestors = function(reqParams){
            $.getJSON(options.dataUrl,reqParams,function(json){
                // Load this json into the tree
            });
        };

        this._initializeDivs = function(target){
            if(target.prop('tagName') != "DIV"){
                alert("PedigreeView can only be placed in a div");
            }

            if(target.attr('id') === undefined){
                target.attr('id',"pv-" + Math.floor(Math.random(1,1000)*1000));
            }

            var html = "<div class='pvChartContainer'>";
                html += "<div class='pvChartControls'>";
                // html += "<span class='chkOrientation' rel='vertical'>Vertical</span> | <span class='chkOrientation' rel='horizontal'>Horizontal</span>";
                html += "<div class='compass' title=''>";
                html += "<div rel='up' class='pan up' title='Pan up'></div>";
                html += "<div rel='left' class='pan left' title='Pan left'></div>";
                html += "<div rel='right' class='pan right' title='Pan right'></div>";
                html += "<div rel='down' class='pan down' title='Pan down'></div>";
                html += "<div rel='center' class='pan center' title='Return to the focus couple'></div>";
                html += "</div>";
                html += "</div>";
                html += "<div class='pvChartPreviewContainer'>";
                html += "<div class='pvChartPreview'></div>";
                html += "</div>";
                html += "<div class='pvChart'></div>";
                html += "<div class='pvWait'>please wait...loading</div>";
                html += "</div>";

            $(target).html(html);

            var divs = {
                chartDiv : target.find('.pvChart'),
                chartContainer : target.find('.pvChartContainer'),
                waitDiv : target.find('.pvWait'),
                preview : 
                {
                    chartDiv : target.find('.pvChartPreview'),
                    chartContainer : target.find('.chartPreviewContainer')
                }
            };

            return divs;
        };


        // Define Listener handlers
        var _listeners = [];
        this.addListener = function(l){
            _listeners.push(l);
        }

        // Get the current focus person
        this.getFocus = function(){
            return _focusPerson;
        }



        /**** Argument handling ****/

        // dataUrl defined?
        if(typeof dataUrl == 'undefined'){
            alert("You must define a dataUrl to fetch ancestors from!");
            return;
        }

        // Initialize the divs we're going to use
        var divs = this._initializeDivs(target);

        // Inialite empty options object in case we're using defaults
        options = options || {};

        // Define default options
        var _defaults = { 
            chartType:'bowtie',
            orientation: 'horizontal',
            defaults:
            {						
                highlightPaintStyle:{ lineWidth:12, strokeStyle:'#736d66' } // this is for highlighting connectors
            },
            limit:100
        };

        // Merge dataUrl, _defaults and options into a settings object
        this._settings = $.extend({dataUrl:dataUrl},_defaults,divs,options);

        /**** Object initialization ****/
        this.addAncestors({a: this._settings.a, d: this._settings.d});
    }

    $.fn.PedigreeViewer = function(dataUrl,options){
        return new PedigreeViewer(this,dataUrl,options);
    };
})(jQuery);
